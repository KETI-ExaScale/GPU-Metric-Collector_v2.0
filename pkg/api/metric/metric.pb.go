// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v4.22.2
// source: pkg/api/metric/metric.proto

package metric

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Request) Reset() {
	*x = Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_api_metric_metric_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Request) ProtoMessage() {}

func (x *Request) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_api_metric_metric_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Request.ProtoReflect.Descriptor instead.
func (*Request) Descriptor() ([]byte, []int) {
	return file_pkg_api_metric_metric_proto_rawDescGZIP(), []int{0}
}

type MultiMetric struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NodeName   string                `protobuf:"bytes,1,opt,name=node_name,json=nodeName,proto3" json:"node_name,omitempty"`
	GpuCount   int64                 `protobuf:"varint,2,opt,name=gpu_count,json=gpuCount,proto3" json:"gpu_count,omitempty"`
	NvlinkInfo []*NVLink             `protobuf:"bytes,3,rep,name=nvlink_info,json=nvlinkInfo,proto3" json:"nvlink_info,omitempty"`
	NodeMetric *NodeMetric           `protobuf:"bytes,4,opt,name=node_metric,json=nodeMetric,proto3" json:"node_metric,omitempty"`
	GpuMetrics map[string]*GPUMetric `protobuf:"bytes,5,rep,name=gpu_metrics,json=gpuMetrics,proto3" json:"gpu_metrics,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	PodMetrics map[string]*PodMetric `protobuf:"bytes,6,rep,name=pod_metrics,json=podMetrics,proto3" json:"pod_metrics,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *MultiMetric) Reset() {
	*x = MultiMetric{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_api_metric_metric_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MultiMetric) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MultiMetric) ProtoMessage() {}

func (x *MultiMetric) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_api_metric_metric_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MultiMetric.ProtoReflect.Descriptor instead.
func (*MultiMetric) Descriptor() ([]byte, []int) {
	return file_pkg_api_metric_metric_proto_rawDescGZIP(), []int{1}
}

func (x *MultiMetric) GetNodeName() string {
	if x != nil {
		return x.NodeName
	}
	return ""
}

func (x *MultiMetric) GetGpuCount() int64 {
	if x != nil {
		return x.GpuCount
	}
	return 0
}

func (x *MultiMetric) GetNvlinkInfo() []*NVLink {
	if x != nil {
		return x.NvlinkInfo
	}
	return nil
}

func (x *MultiMetric) GetNodeMetric() *NodeMetric {
	if x != nil {
		return x.NodeMetric
	}
	return nil
}

func (x *MultiMetric) GetGpuMetrics() map[string]*GPUMetric {
	if x != nil {
		return x.GpuMetrics
	}
	return nil
}

func (x *MultiMetric) GetPodMetrics() map[string]*PodMetric {
	if x != nil {
		return x.PodMetrics
	}
	return nil
}

type NodeMetric struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MilliCpuTotal int64 `protobuf:"varint,1,opt,name=milli_cpu_total,json=milliCpuTotal,proto3" json:"milli_cpu_total,omitempty"`
	MilliCpuUsage int64 `protobuf:"varint,2,opt,name=milli_cpu_usage,json=milliCpuUsage,proto3" json:"milli_cpu_usage,omitempty"`
	MemoryTotal   int64 `protobuf:"varint,3,opt,name=memory_total,json=memoryTotal,proto3" json:"memory_total,omitempty"`
	MemoryUsage   int64 `protobuf:"varint,4,opt,name=memory_usage,json=memoryUsage,proto3" json:"memory_usage,omitempty"`
	StorageTotal  int64 `protobuf:"varint,5,opt,name=storage_total,json=storageTotal,proto3" json:"storage_total,omitempty"`
	StorageUsage  int64 `protobuf:"varint,6,opt,name=storage_usage,json=storageUsage,proto3" json:"storage_usage,omitempty"`
	NetworkRx     int64 `protobuf:"varint,7,opt,name=network_rx,json=networkRx,proto3" json:"network_rx,omitempty"`
	NetworkTx     int64 `protobuf:"varint,8,opt,name=network_tx,json=networkTx,proto3" json:"network_tx,omitempty"`
}

func (x *NodeMetric) Reset() {
	*x = NodeMetric{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_api_metric_metric_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NodeMetric) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NodeMetric) ProtoMessage() {}

func (x *NodeMetric) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_api_metric_metric_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NodeMetric.ProtoReflect.Descriptor instead.
func (*NodeMetric) Descriptor() ([]byte, []int) {
	return file_pkg_api_metric_metric_proto_rawDescGZIP(), []int{2}
}

func (x *NodeMetric) GetMilliCpuTotal() int64 {
	if x != nil {
		return x.MilliCpuTotal
	}
	return 0
}

func (x *NodeMetric) GetMilliCpuUsage() int64 {
	if x != nil {
		return x.MilliCpuUsage
	}
	return 0
}

func (x *NodeMetric) GetMemoryTotal() int64 {
	if x != nil {
		return x.MemoryTotal
	}
	return 0
}

func (x *NodeMetric) GetMemoryUsage() int64 {
	if x != nil {
		return x.MemoryUsage
	}
	return 0
}

func (x *NodeMetric) GetStorageTotal() int64 {
	if x != nil {
		return x.StorageTotal
	}
	return 0
}

func (x *NodeMetric) GetStorageUsage() int64 {
	if x != nil {
		return x.StorageUsage
	}
	return 0
}

func (x *NodeMetric) GetNetworkRx() int64 {
	if x != nil {
		return x.NetworkRx
	}
	return 0
}

func (x *NodeMetric) GetNetworkTx() int64 {
	if x != nil {
		return x.NetworkTx
	}
	return 0
}

type GPUMetric struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Index             int32   `protobuf:"varint,1,opt,name=index,proto3" json:"index,omitempty"`
	GpuName           string  `protobuf:"bytes,2,opt,name=gpu_name,json=gpuName,proto3" json:"gpu_name,omitempty"`
	Architecture      string  `protobuf:"bytes,3,opt,name=architecture,proto3" json:"architecture,omitempty"`
	MaxClock          int64   `protobuf:"varint,4,opt,name=max_clock,json=maxClock,proto3" json:"max_clock,omitempty"`
	Cudacore          int64   `protobuf:"varint,5,opt,name=cudacore,proto3" json:"cudacore,omitempty"`
	Bandwidth         float32 `protobuf:"fixed32,6,opt,name=bandwidth,proto3" json:"bandwidth,omitempty"`
	Flops             int64   `protobuf:"varint,7,opt,name=flops,proto3" json:"flops,omitempty"`
	MaxOperativeTemp  int64   `protobuf:"varint,8,opt,name=max_operative_temp,json=maxOperativeTemp,proto3" json:"max_operative_temp,omitempty"`
	SlowdownTemp      int64   `protobuf:"varint,9,opt,name=slowdown_temp,json=slowdownTemp,proto3" json:"slowdown_temp,omitempty"`
	ShutdownTemp      int64   `protobuf:"varint,10,opt,name=shutdown_temp,json=shutdownTemp,proto3" json:"shutdown_temp,omitempty"`
	MemoryTotal       int64   `protobuf:"varint,11,opt,name=memory_total,json=memoryTotal,proto3" json:"memory_total,omitempty"`
	MemoryUsed        int64   `protobuf:"varint,12,opt,name=memory_used,json=memoryUsed,proto3" json:"memory_used,omitempty"`
	PowerUsed         int64   `protobuf:"varint,13,opt,name=power_used,json=powerUsed,proto3" json:"power_used,omitempty"`
	PciRx             int64   `protobuf:"varint,14,opt,name=pci_rx,json=pciRx,proto3" json:"pci_rx,omitempty"`
	PciTx             int64   `protobuf:"varint,15,opt,name=pci_tx,json=pciTx,proto3" json:"pci_tx,omitempty"`
	Temperature       int64   `protobuf:"varint,16,opt,name=temperature,proto3" json:"temperature,omitempty"`
	Utilization       int64   `protobuf:"varint,17,opt,name=utilization,proto3" json:"utilization,omitempty"`
	FanSpeed          int64   `protobuf:"varint,18,opt,name=fan_speed,json=fanSpeed,proto3" json:"fan_speed,omitempty"`
	PodCount          int64   `protobuf:"varint,19,opt,name=pod_count,json=podCount,proto3" json:"pod_count,omitempty"`
	EnergyConsumption int64   `protobuf:"varint,20,opt,name=energy_consumption,json=energyConsumption,proto3" json:"energy_consumption,omitempty"`
}

func (x *GPUMetric) Reset() {
	*x = GPUMetric{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_api_metric_metric_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GPUMetric) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GPUMetric) ProtoMessage() {}

func (x *GPUMetric) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_api_metric_metric_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GPUMetric.ProtoReflect.Descriptor instead.
func (*GPUMetric) Descriptor() ([]byte, []int) {
	return file_pkg_api_metric_metric_proto_rawDescGZIP(), []int{3}
}

func (x *GPUMetric) GetIndex() int32 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *GPUMetric) GetGpuName() string {
	if x != nil {
		return x.GpuName
	}
	return ""
}

func (x *GPUMetric) GetArchitecture() string {
	if x != nil {
		return x.Architecture
	}
	return ""
}

func (x *GPUMetric) GetMaxClock() int64 {
	if x != nil {
		return x.MaxClock
	}
	return 0
}

func (x *GPUMetric) GetCudacore() int64 {
	if x != nil {
		return x.Cudacore
	}
	return 0
}

func (x *GPUMetric) GetBandwidth() float32 {
	if x != nil {
		return x.Bandwidth
	}
	return 0
}

func (x *GPUMetric) GetFlops() int64 {
	if x != nil {
		return x.Flops
	}
	return 0
}

func (x *GPUMetric) GetMaxOperativeTemp() int64 {
	if x != nil {
		return x.MaxOperativeTemp
	}
	return 0
}

func (x *GPUMetric) GetSlowdownTemp() int64 {
	if x != nil {
		return x.SlowdownTemp
	}
	return 0
}

func (x *GPUMetric) GetShutdownTemp() int64 {
	if x != nil {
		return x.ShutdownTemp
	}
	return 0
}

func (x *GPUMetric) GetMemoryTotal() int64 {
	if x != nil {
		return x.MemoryTotal
	}
	return 0
}

func (x *GPUMetric) GetMemoryUsed() int64 {
	if x != nil {
		return x.MemoryUsed
	}
	return 0
}

func (x *GPUMetric) GetPowerUsed() int64 {
	if x != nil {
		return x.PowerUsed
	}
	return 0
}

func (x *GPUMetric) GetPciRx() int64 {
	if x != nil {
		return x.PciRx
	}
	return 0
}

func (x *GPUMetric) GetPciTx() int64 {
	if x != nil {
		return x.PciTx
	}
	return 0
}

func (x *GPUMetric) GetTemperature() int64 {
	if x != nil {
		return x.Temperature
	}
	return 0
}

func (x *GPUMetric) GetUtilization() int64 {
	if x != nil {
		return x.Utilization
	}
	return 0
}

func (x *GPUMetric) GetFanSpeed() int64 {
	if x != nil {
		return x.FanSpeed
	}
	return 0
}

func (x *GPUMetric) GetPodCount() int64 {
	if x != nil {
		return x.PodCount
	}
	return 0
}

func (x *GPUMetric) GetEnergyConsumption() int64 {
	if x != nil {
		return x.EnergyConsumption
	}
	return 0
}

type PodMetric struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PodPid        string                   `protobuf:"bytes,1,opt,name=pod_pid,json=podPid,proto3" json:"pod_pid,omitempty"`
	CpuUsage      int64                    `protobuf:"varint,2,opt,name=cpu_usage,json=cpuUsage,proto3" json:"cpu_usage,omitempty"`
	MemoryUsage   int64                    `protobuf:"varint,3,opt,name=memory_usage,json=memoryUsage,proto3" json:"memory_usage,omitempty"`
	StorageUsage  int64                    `protobuf:"varint,4,opt,name=storage_usage,json=storageUsage,proto3" json:"storage_usage,omitempty"`
	NetworkRx     int64                    `protobuf:"varint,5,opt,name=network_rx,json=networkRx,proto3" json:"network_rx,omitempty"`
	NetworkTx     int64                    `protobuf:"varint,6,opt,name=network_tx,json=networkTx,proto3" json:"network_tx,omitempty"`
	IsGpuPod      bool                     `protobuf:"varint,7,opt,name=is_gpu_pod,json=isGpuPod,proto3" json:"is_gpu_pod,omitempty"`
	PodGpuMetrics map[string]*PodGPUMetric `protobuf:"bytes,8,rep,name=pod_gpu_metrics,json=podGpuMetrics,proto3" json:"pod_gpu_metrics,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *PodMetric) Reset() {
	*x = PodMetric{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_api_metric_metric_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PodMetric) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PodMetric) ProtoMessage() {}

func (x *PodMetric) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_api_metric_metric_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PodMetric.ProtoReflect.Descriptor instead.
func (*PodMetric) Descriptor() ([]byte, []int) {
	return file_pkg_api_metric_metric_proto_rawDescGZIP(), []int{4}
}

func (x *PodMetric) GetPodPid() string {
	if x != nil {
		return x.PodPid
	}
	return ""
}

func (x *PodMetric) GetCpuUsage() int64 {
	if x != nil {
		return x.CpuUsage
	}
	return 0
}

func (x *PodMetric) GetMemoryUsage() int64 {
	if x != nil {
		return x.MemoryUsage
	}
	return 0
}

func (x *PodMetric) GetStorageUsage() int64 {
	if x != nil {
		return x.StorageUsage
	}
	return 0
}

func (x *PodMetric) GetNetworkRx() int64 {
	if x != nil {
		return x.NetworkRx
	}
	return 0
}

func (x *PodMetric) GetNetworkTx() int64 {
	if x != nil {
		return x.NetworkTx
	}
	return 0
}

func (x *PodMetric) GetIsGpuPod() bool {
	if x != nil {
		return x.IsGpuPod
	}
	return false
}

func (x *PodMetric) GetPodGpuMetrics() map[string]*PodGPUMetric {
	if x != nil {
		return x.PodGpuMetrics
	}
	return nil
}

type PodGPUMetric struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GpuUuid       string `protobuf:"bytes,1,opt,name=gpu_uuid,json=gpuUuid,proto3" json:"gpu_uuid,omitempty"`
	GpuProcessId  string `protobuf:"bytes,2,opt,name=gpu_process_id,json=gpuProcessId,proto3" json:"gpu_process_id,omitempty"`
	GpuMemoryUsed int64  `protobuf:"varint,3,opt,name=gpu_memory_used,json=gpuMemoryUsed,proto3" json:"gpu_memory_used,omitempty"`
}

func (x *PodGPUMetric) Reset() {
	*x = PodGPUMetric{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_api_metric_metric_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PodGPUMetric) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PodGPUMetric) ProtoMessage() {}

func (x *PodGPUMetric) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_api_metric_metric_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PodGPUMetric.ProtoReflect.Descriptor instead.
func (*PodGPUMetric) Descriptor() ([]byte, []int) {
	return file_pkg_api_metric_metric_proto_rawDescGZIP(), []int{5}
}

func (x *PodGPUMetric) GetGpuUuid() string {
	if x != nil {
		return x.GpuUuid
	}
	return ""
}

func (x *PodGPUMetric) GetGpuProcessId() string {
	if x != nil {
		return x.GpuProcessId
	}
	return ""
}

func (x *PodGPUMetric) GetGpuMemoryUsed() int64 {
	if x != nil {
		return x.GpuMemoryUsed
	}
	return 0
}

type NVLink struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Gpu1Uuid  string `protobuf:"bytes,1,opt,name=gpu1uuid,proto3" json:"gpu1uuid,omitempty"`
	Gpu2Uuid  string `protobuf:"bytes,2,opt,name=gpu2uuid,proto3" json:"gpu2uuid,omitempty"`
	Lanecount int32  `protobuf:"varint,3,opt,name=lanecount,proto3" json:"lanecount,omitempty"`
}

func (x *NVLink) Reset() {
	*x = NVLink{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_api_metric_metric_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NVLink) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NVLink) ProtoMessage() {}

func (x *NVLink) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_api_metric_metric_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NVLink.ProtoReflect.Descriptor instead.
func (*NVLink) Descriptor() ([]byte, []int) {
	return file_pkg_api_metric_metric_proto_rawDescGZIP(), []int{6}
}

func (x *NVLink) GetGpu1Uuid() string {
	if x != nil {
		return x.Gpu1Uuid
	}
	return ""
}

func (x *NVLink) GetGpu2Uuid() string {
	if x != nil {
		return x.Gpu2Uuid
	}
	return ""
}

func (x *NVLink) GetLanecount() int32 {
	if x != nil {
		return x.Lanecount
	}
	return 0
}

var File_pkg_api_metric_metric_proto protoreflect.FileDescriptor

var file_pkg_api_metric_metric_proto_rawDesc = []byte{
	0x0a, 0x1b, 0x70, 0x6b, 0x67, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63,
	0x2f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x06, 0x6d,
	0x65, 0x74, 0x72, 0x69, 0x63, 0x22, 0x09, 0x0a, 0x07, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x22, 0xdd, 0x03, 0x0a, 0x0b, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63,
	0x12, 0x1b, 0x0a, 0x09, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x6e, 0x6f, 0x64, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a,
	0x09, 0x67, 0x70, 0x75, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x08, 0x67, 0x70, 0x75, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2f, 0x0a, 0x0b, 0x6e, 0x76,
	0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x0e, 0x2e, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x2e, 0x4e, 0x56, 0x4c, 0x69, 0x6e, 0x6b, 0x52,
	0x0a, 0x6e, 0x76, 0x6c, 0x69, 0x6e, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x33, 0x0a, 0x0b, 0x6e,
	0x6f, 0x64, 0x65, 0x5f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x12, 0x2e, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x4d, 0x65,
	0x74, 0x72, 0x69, 0x63, 0x52, 0x0a, 0x6e, 0x6f, 0x64, 0x65, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63,
	0x12, 0x44, 0x0a, 0x0b, 0x67, 0x70, 0x75, 0x5f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x18,
	0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x2e, 0x4d,
	0x75, 0x6c, 0x74, 0x69, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x2e, 0x47, 0x70, 0x75, 0x4d, 0x65,
	0x74, 0x72, 0x69, 0x63, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0a, 0x67, 0x70, 0x75, 0x4d,
	0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x12, 0x44, 0x0a, 0x0b, 0x70, 0x6f, 0x64, 0x5f, 0x6d, 0x65,
	0x74, 0x72, 0x69, 0x63, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x6d, 0x65,
	0x74, 0x72, 0x69, 0x63, 0x2e, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63,
	0x2e, 0x50, 0x6f, 0x64, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x0a, 0x70, 0x6f, 0x64, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x1a, 0x50, 0x0a, 0x0f,
	0x47, 0x70, 0x75, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x27, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x11, 0x2e, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x2e, 0x47, 0x50, 0x55, 0x4d, 0x65, 0x74,
	0x72, 0x69, 0x63, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x50,
	0x0a, 0x0f, 0x50, 0x6f, 0x64, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x27, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x11, 0x2e, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x2e, 0x50, 0x6f, 0x64, 0x4d,
	0x65, 0x74, 0x72, 0x69, 0x63, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x22, 0xaa, 0x02, 0x0a, 0x0a, 0x4e, 0x6f, 0x64, 0x65, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x12,
	0x26, 0x0a, 0x0f, 0x6d, 0x69, 0x6c, 0x6c, 0x69, 0x5f, 0x63, 0x70, 0x75, 0x5f, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x6d, 0x69, 0x6c, 0x6c, 0x69, 0x43,
	0x70, 0x75, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x26, 0x0a, 0x0f, 0x6d, 0x69, 0x6c, 0x6c, 0x69,
	0x5f, 0x63, 0x70, 0x75, 0x5f, 0x75, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0d, 0x6d, 0x69, 0x6c, 0x6c, 0x69, 0x43, 0x70, 0x75, 0x55, 0x73, 0x61, 0x67, 0x65, 0x12,
	0x21, 0x0a, 0x0c, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x54, 0x6f, 0x74,
	0x61, 0x6c, 0x12, 0x21, 0x0a, 0x0c, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x5f, 0x75, 0x73, 0x61,
	0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79,
	0x55, 0x73, 0x61, 0x67, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65,
	0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x73, 0x74,
	0x6f, 0x72, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x74,
	0x6f, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x75, 0x73, 0x61, 0x67, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0c, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x55, 0x73, 0x61, 0x67, 0x65, 0x12,
	0x1d, 0x0a, 0x0a, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x72, 0x78, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x09, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x52, 0x78, 0x12, 0x1d,
	0x0a, 0x0a, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x74, 0x78, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x09, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x54, 0x78, 0x22, 0x83, 0x05,
	0x0a, 0x09, 0x47, 0x50, 0x55, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x12, 0x14, 0x0a, 0x05, 0x69,
	0x6e, 0x64, 0x65, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x69, 0x6e, 0x64, 0x65,
	0x78, 0x12, 0x19, 0x0a, 0x08, 0x67, 0x70, 0x75, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x67, 0x70, 0x75, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0c,
	0x61, 0x72, 0x63, 0x68, 0x69, 0x74, 0x65, 0x63, 0x74, 0x75, 0x72, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x61, 0x72, 0x63, 0x68, 0x69, 0x74, 0x65, 0x63, 0x74, 0x75, 0x72, 0x65,
	0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x61, 0x78, 0x5f, 0x63, 0x6c, 0x6f, 0x63, 0x6b, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x08, 0x6d, 0x61, 0x78, 0x43, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x1a, 0x0a,
	0x08, 0x63, 0x75, 0x64, 0x61, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x08, 0x63, 0x75, 0x64, 0x61, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x62, 0x61, 0x6e,
	0x64, 0x77, 0x69, 0x64, 0x74, 0x68, 0x18, 0x06, 0x20, 0x01, 0x28, 0x02, 0x52, 0x09, 0x62, 0x61,
	0x6e, 0x64, 0x77, 0x69, 0x64, 0x74, 0x68, 0x12, 0x14, 0x0a, 0x05, 0x66, 0x6c, 0x6f, 0x70, 0x73,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x66, 0x6c, 0x6f, 0x70, 0x73, 0x12, 0x2c, 0x0a,
	0x12, 0x6d, 0x61, 0x78, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x74,
	0x65, 0x6d, 0x70, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x6d, 0x61, 0x78, 0x4f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x69, 0x76, 0x65, 0x54, 0x65, 0x6d, 0x70, 0x12, 0x23, 0x0a, 0x0d, 0x73,
	0x6c, 0x6f, 0x77, 0x64, 0x6f, 0x77, 0x6e, 0x5f, 0x74, 0x65, 0x6d, 0x70, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0c, 0x73, 0x6c, 0x6f, 0x77, 0x64, 0x6f, 0x77, 0x6e, 0x54, 0x65, 0x6d, 0x70,
	0x12, 0x23, 0x0a, 0x0d, 0x73, 0x68, 0x75, 0x74, 0x64, 0x6f, 0x77, 0x6e, 0x5f, 0x74, 0x65, 0x6d,
	0x70, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x73, 0x68, 0x75, 0x74, 0x64, 0x6f, 0x77,
	0x6e, 0x54, 0x65, 0x6d, 0x70, 0x12, 0x21, 0x0a, 0x0c, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x5f,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x6d, 0x65, 0x6d,
	0x6f, 0x72, 0x79, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x65, 0x6d, 0x6f,
	0x72, 0x79, 0x5f, 0x75, 0x73, 0x65, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x6d,
	0x65, 0x6d, 0x6f, 0x72, 0x79, 0x55, 0x73, 0x65, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x6f, 0x77,
	0x65, 0x72, 0x5f, 0x75, 0x73, 0x65, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x70,
	0x6f, 0x77, 0x65, 0x72, 0x55, 0x73, 0x65, 0x64, 0x12, 0x15, 0x0a, 0x06, 0x70, 0x63, 0x69, 0x5f,
	0x72, 0x78, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x70, 0x63, 0x69, 0x52, 0x78, 0x12,
	0x15, 0x0a, 0x06, 0x70, 0x63, 0x69, 0x5f, 0x74, 0x78, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x05, 0x70, 0x63, 0x69, 0x54, 0x78, 0x12, 0x20, 0x0a, 0x0b, 0x74, 0x65, 0x6d, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x74, 0x65, 0x6d,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x75, 0x74, 0x69, 0x6c,
	0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x11, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x75,
	0x74, 0x69, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x61,
	0x6e, 0x5f, 0x73, 0x70, 0x65, 0x65, 0x64, 0x18, 0x12, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x66,
	0x61, 0x6e, 0x53, 0x70, 0x65, 0x65, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x6f, 0x64, 0x5f, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x13, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x70, 0x6f, 0x64, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2d, 0x0a, 0x12, 0x65, 0x6e, 0x65, 0x72, 0x67, 0x79, 0x5f, 0x63,
	0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x14, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x11, 0x65, 0x6e, 0x65, 0x72, 0x67, 0x79, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x22, 0x8b, 0x03, 0x0a, 0x09, 0x50, 0x6f, 0x64, 0x4d, 0x65, 0x74, 0x72, 0x69,
	0x63, 0x12, 0x17, 0x0a, 0x07, 0x70, 0x6f, 0x64, 0x5f, 0x70, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x70, 0x6f, 0x64, 0x50, 0x69, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x70,
	0x75, 0x5f, 0x75, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x63,
	0x70, 0x75, 0x55, 0x73, 0x61, 0x67, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x6d, 0x65, 0x6d, 0x6f, 0x72,
	0x79, 0x5f, 0x75, 0x73, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x6d,
	0x65, 0x6d, 0x6f, 0x72, 0x79, 0x55, 0x73, 0x61, 0x67, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x74,
	0x6f, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x75, 0x73, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0c, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x55, 0x73, 0x61, 0x67, 0x65, 0x12,
	0x1d, 0x0a, 0x0a, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x72, 0x78, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x09, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x52, 0x78, 0x12, 0x1d,
	0x0a, 0x0a, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x74, 0x78, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x09, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x54, 0x78, 0x12, 0x1c, 0x0a,
	0x0a, 0x69, 0x73, 0x5f, 0x67, 0x70, 0x75, 0x5f, 0x70, 0x6f, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x08, 0x69, 0x73, 0x47, 0x70, 0x75, 0x50, 0x6f, 0x64, 0x12, 0x4c, 0x0a, 0x0f, 0x70,
	0x6f, 0x64, 0x5f, 0x67, 0x70, 0x75, 0x5f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x18, 0x08,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x2e, 0x50, 0x6f,
	0x64, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x2e, 0x50, 0x6f, 0x64, 0x47, 0x70, 0x75, 0x4d, 0x65,
	0x74, 0x72, 0x69, 0x63, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0d, 0x70, 0x6f, 0x64, 0x47,
	0x70, 0x75, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x1a, 0x56, 0x0a, 0x12, 0x50, 0x6f, 0x64,
	0x47, 0x70, 0x75, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x2a, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x14, 0x2e, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x2e, 0x50, 0x6f, 0x64, 0x47, 0x50, 0x55,
	0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x22, 0x77, 0x0a, 0x0c, 0x50, 0x6f, 0x64, 0x47, 0x50, 0x55, 0x4d, 0x65, 0x74, 0x72, 0x69,
	0x63, 0x12, 0x19, 0x0a, 0x08, 0x67, 0x70, 0x75, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x67, 0x70, 0x75, 0x55, 0x75, 0x69, 0x64, 0x12, 0x24, 0x0a, 0x0e,
	0x67, 0x70, 0x75, 0x5f, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x67, 0x70, 0x75, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73,
	0x49, 0x64, 0x12, 0x26, 0x0a, 0x0f, 0x67, 0x70, 0x75, 0x5f, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79,
	0x5f, 0x75, 0x73, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x67, 0x70, 0x75,
	0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x55, 0x73, 0x65, 0x64, 0x22, 0x5e, 0x0a, 0x06, 0x4e, 0x56,
	0x4c, 0x69, 0x6e, 0x6b, 0x12, 0x1a, 0x0a, 0x08, 0x67, 0x70, 0x75, 0x31, 0x75, 0x75, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x67, 0x70, 0x75, 0x31, 0x75, 0x75, 0x69, 0x64,
	0x12, 0x1a, 0x0a, 0x08, 0x67, 0x70, 0x75, 0x32, 0x75, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x67, 0x70, 0x75, 0x32, 0x75, 0x75, 0x69, 0x64, 0x12, 0x1c, 0x0a, 0x09,
	0x6c, 0x61, 0x6e, 0x65, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x09, 0x6c, 0x61, 0x6e, 0x65, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x32, 0x49, 0x0a, 0x0f, 0x4d, 0x65,
	0x74, 0x72, 0x69, 0x63, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x36, 0x0a,
	0x0e, 0x47, 0x65, 0x74, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x12,
	0x0f, 0x2e, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x13, 0x2e, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x2e, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x4d,
	0x65, 0x74, 0x72, 0x69, 0x63, 0x42, 0x25, 0x5a, 0x23, 0x67, 0x70, 0x75, 0x2d, 0x6d, 0x65, 0x74,
	0x72, 0x69, 0x63, 0x2d, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2f, 0x70, 0x6b,
	0x67, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_pkg_api_metric_metric_proto_rawDescOnce sync.Once
	file_pkg_api_metric_metric_proto_rawDescData = file_pkg_api_metric_metric_proto_rawDesc
)

func file_pkg_api_metric_metric_proto_rawDescGZIP() []byte {
	file_pkg_api_metric_metric_proto_rawDescOnce.Do(func() {
		file_pkg_api_metric_metric_proto_rawDescData = protoimpl.X.CompressGZIP(file_pkg_api_metric_metric_proto_rawDescData)
	})
	return file_pkg_api_metric_metric_proto_rawDescData
}

var file_pkg_api_metric_metric_proto_msgTypes = make([]protoimpl.MessageInfo, 10)
var file_pkg_api_metric_metric_proto_goTypes = []interface{}{
	(*Request)(nil),      // 0: metric.Request
	(*MultiMetric)(nil),  // 1: metric.MultiMetric
	(*NodeMetric)(nil),   // 2: metric.NodeMetric
	(*GPUMetric)(nil),    // 3: metric.GPUMetric
	(*PodMetric)(nil),    // 4: metric.PodMetric
	(*PodGPUMetric)(nil), // 5: metric.PodGPUMetric
	(*NVLink)(nil),       // 6: metric.NVLink
	nil,                  // 7: metric.MultiMetric.GpuMetricsEntry
	nil,                  // 8: metric.MultiMetric.PodMetricsEntry
	nil,                  // 9: metric.PodMetric.PodGpuMetricsEntry
}
var file_pkg_api_metric_metric_proto_depIdxs = []int32{
	6, // 0: metric.MultiMetric.nvlink_info:type_name -> metric.NVLink
	2, // 1: metric.MultiMetric.node_metric:type_name -> metric.NodeMetric
	7, // 2: metric.MultiMetric.gpu_metrics:type_name -> metric.MultiMetric.GpuMetricsEntry
	8, // 3: metric.MultiMetric.pod_metrics:type_name -> metric.MultiMetric.PodMetricsEntry
	9, // 4: metric.PodMetric.pod_gpu_metrics:type_name -> metric.PodMetric.PodGpuMetricsEntry
	3, // 5: metric.MultiMetric.GpuMetricsEntry.value:type_name -> metric.GPUMetric
	4, // 6: metric.MultiMetric.PodMetricsEntry.value:type_name -> metric.PodMetric
	5, // 7: metric.PodMetric.PodGpuMetricsEntry.value:type_name -> metric.PodGPUMetric
	0, // 8: metric.MetricCollector.GetMultiMetric:input_type -> metric.Request
	1, // 9: metric.MetricCollector.GetMultiMetric:output_type -> metric.MultiMetric
	9, // [9:10] is the sub-list for method output_type
	8, // [8:9] is the sub-list for method input_type
	8, // [8:8] is the sub-list for extension type_name
	8, // [8:8] is the sub-list for extension extendee
	0, // [0:8] is the sub-list for field type_name
}

func init() { file_pkg_api_metric_metric_proto_init() }
func file_pkg_api_metric_metric_proto_init() {
	if File_pkg_api_metric_metric_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_pkg_api_metric_metric_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_api_metric_metric_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MultiMetric); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_api_metric_metric_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NodeMetric); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_api_metric_metric_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GPUMetric); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_api_metric_metric_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PodMetric); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_api_metric_metric_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PodGPUMetric); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_api_metric_metric_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NVLink); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_pkg_api_metric_metric_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   10,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_pkg_api_metric_metric_proto_goTypes,
		DependencyIndexes: file_pkg_api_metric_metric_proto_depIdxs,
		MessageInfos:      file_pkg_api_metric_metric_proto_msgTypes,
	}.Build()
	File_pkg_api_metric_metric_proto = out.File
	file_pkg_api_metric_metric_proto_rawDesc = nil
	file_pkg_api_metric_metric_proto_goTypes = nil
	file_pkg_api_metric_metric_proto_depIdxs = nil
}
