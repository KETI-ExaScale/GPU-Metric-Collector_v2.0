// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v4.22.2
// source: pkg/api/metric/metric.proto

package metric

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Request) Reset() {
	*x = Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_api_metric_metric_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Request) ProtoMessage() {}

func (x *Request) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_api_metric_metric_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Request.ProtoReflect.Descriptor instead.
func (*Request) Descriptor() ([]byte, []int) {
	return file_pkg_api_metric_metric_proto_rawDescGZIP(), []int{0}
}

type MultiMetric struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NodeName   string                `protobuf:"bytes,1,opt,name=node_name,json=nodeName,proto3" json:"node_name,omitempty"`
	NodeMetric *NodeMetric           `protobuf:"bytes,2,opt,name=node_metric,json=nodeMetric,proto3" json:"node_metric,omitempty"`
	GpuMetrics map[string]*GPUMetric `protobuf:"bytes,3,rep,name=gpu_metrics,json=gpuMetrics,proto3" json:"gpu_metrics,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *MultiMetric) Reset() {
	*x = MultiMetric{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_api_metric_metric_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MultiMetric) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MultiMetric) ProtoMessage() {}

func (x *MultiMetric) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_api_metric_metric_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MultiMetric.ProtoReflect.Descriptor instead.
func (*MultiMetric) Descriptor() ([]byte, []int) {
	return file_pkg_api_metric_metric_proto_rawDescGZIP(), []int{1}
}

func (x *MultiMetric) GetNodeName() string {
	if x != nil {
		return x.NodeName
	}
	return ""
}

func (x *MultiMetric) GetNodeMetric() *NodeMetric {
	if x != nil {
		return x.NodeMetric
	}
	return nil
}

func (x *MultiMetric) GetGpuMetrics() map[string]*GPUMetric {
	if x != nil {
		return x.GpuMetrics
	}
	return nil
}

type NodeMetric struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MilliCpuTotal int64 `protobuf:"varint,1,opt,name=milli_cpu_total,json=milliCpuTotal,proto3" json:"milli_cpu_total,omitempty"`
	MilliCpuFree  int64 `protobuf:"varint,2,opt,name=milli_cpu_free,json=milliCpuFree,proto3" json:"milli_cpu_free,omitempty"`
	MemoryTotal   int64 `protobuf:"varint,3,opt,name=memory_total,json=memoryTotal,proto3" json:"memory_total,omitempty"`
	MemoryFree    int64 `protobuf:"varint,4,opt,name=memory_free,json=memoryFree,proto3" json:"memory_free,omitempty"`
	StorageTotal  int64 `protobuf:"varint,5,opt,name=storage_total,json=storageTotal,proto3" json:"storage_total,omitempty"`
	StorageFree   int64 `protobuf:"varint,6,opt,name=storage_free,json=storageFree,proto3" json:"storage_free,omitempty"`
	NetworkRx     int64 `protobuf:"varint,7,opt,name=network_rx,json=networkRx,proto3" json:"network_rx,omitempty"`
	NetworkTx     int64 `protobuf:"varint,8,opt,name=network_tx,json=networkTx,proto3" json:"network_tx,omitempty"`
}

func (x *NodeMetric) Reset() {
	*x = NodeMetric{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_api_metric_metric_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NodeMetric) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NodeMetric) ProtoMessage() {}

func (x *NodeMetric) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_api_metric_metric_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NodeMetric.ProtoReflect.Descriptor instead.
func (*NodeMetric) Descriptor() ([]byte, []int) {
	return file_pkg_api_metric_metric_proto_rawDescGZIP(), []int{2}
}

func (x *NodeMetric) GetMilliCpuTotal() int64 {
	if x != nil {
		return x.MilliCpuTotal
	}
	return 0
}

func (x *NodeMetric) GetMilliCpuFree() int64 {
	if x != nil {
		return x.MilliCpuFree
	}
	return 0
}

func (x *NodeMetric) GetMemoryTotal() int64 {
	if x != nil {
		return x.MemoryTotal
	}
	return 0
}

func (x *NodeMetric) GetMemoryFree() int64 {
	if x != nil {
		return x.MemoryFree
	}
	return 0
}

func (x *NodeMetric) GetStorageTotal() int64 {
	if x != nil {
		return x.StorageTotal
	}
	return 0
}

func (x *NodeMetric) GetStorageFree() int64 {
	if x != nil {
		return x.StorageFree
	}
	return 0
}

func (x *NodeMetric) GetNetworkRx() int64 {
	if x != nil {
		return x.NetworkRx
	}
	return 0
}

func (x *NodeMetric) GetNetworkTx() int64 {
	if x != nil {
		return x.NetworkTx
	}
	return 0
}

type GPUMetric struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Index            int32                 `protobuf:"varint,1,opt,name=index,proto3" json:"index,omitempty"`
	GpuName          string                `protobuf:"bytes,2,opt,name=gpu_name,json=gpuName,proto3" json:"gpu_name,omitempty"`
	Architecture     int32                 `protobuf:"varint,3,opt,name=architecture,proto3" json:"architecture,omitempty"`
	MaxClock         int64                 `protobuf:"varint,4,opt,name=max_clock,json=maxClock,proto3" json:"max_clock,omitempty"`
	Cudacore         int64                 `protobuf:"varint,5,opt,name=cudacore,proto3" json:"cudacore,omitempty"`
	Bandwidth        float32               `protobuf:"fixed32,6,opt,name=bandwidth,proto3" json:"bandwidth,omitempty"`
	Flops            int64                 `protobuf:"varint,7,opt,name=flops,proto3" json:"flops,omitempty"`
	MaxOperativeTemp int64                 `protobuf:"varint,8,opt,name=max_operative_temp,json=maxOperativeTemp,proto3" json:"max_operative_temp,omitempty"`
	SlowdownTemp     int64                 `protobuf:"varint,9,opt,name=slowdown_temp,json=slowdownTemp,proto3" json:"slowdown_temp,omitempty"`
	ShutdownTemp     int64                 `protobuf:"varint,10,opt,name=shutdown_temp,json=shutdownTemp,proto3" json:"shutdown_temp,omitempty"`
	MemoryTotal      int64                 `protobuf:"varint,11,opt,name=memory_total,json=memoryTotal,proto3" json:"memory_total,omitempty"`
	MemoryUsed       int64                 `protobuf:"varint,12,opt,name=memory_used,json=memoryUsed,proto3" json:"memory_used,omitempty"`
	PowerUsed        int64                 `protobuf:"varint,13,opt,name=power_used,json=powerUsed,proto3" json:"power_used,omitempty"`
	PciRx            int64                 `protobuf:"varint,14,opt,name=pci_rx,json=pciRx,proto3" json:"pci_rx,omitempty"`
	PciTx            int64                 `protobuf:"varint,15,opt,name=pci_tx,json=pciTx,proto3" json:"pci_tx,omitempty"`
	MemoryGauge      int64                 `protobuf:"varint,16,opt,name=memory_gauge,json=memoryGauge,proto3" json:"memory_gauge,omitempty"`
	MemoryCounter    int64                 `protobuf:"varint,17,opt,name=memory_counter,json=memoryCounter,proto3" json:"memory_counter,omitempty"`
	Temperature      int64                 `protobuf:"varint,18,opt,name=temperature,proto3" json:"temperature,omitempty"`
	Utilization      int64                 `protobuf:"varint,19,opt,name=utilization,proto3" json:"utilization,omitempty"`
	FanSpeed         int64                 `protobuf:"varint,20,opt,name=fan_speed,json=fanSpeed,proto3" json:"fan_speed,omitempty"`
	PodMetrics       map[string]*PodMetric `protobuf:"bytes,21,rep,name=pod_metrics,json=podMetrics,proto3" json:"pod_metrics,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *GPUMetric) Reset() {
	*x = GPUMetric{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_api_metric_metric_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GPUMetric) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GPUMetric) ProtoMessage() {}

func (x *GPUMetric) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_api_metric_metric_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GPUMetric.ProtoReflect.Descriptor instead.
func (*GPUMetric) Descriptor() ([]byte, []int) {
	return file_pkg_api_metric_metric_proto_rawDescGZIP(), []int{3}
}

func (x *GPUMetric) GetIndex() int32 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *GPUMetric) GetGpuName() string {
	if x != nil {
		return x.GpuName
	}
	return ""
}

func (x *GPUMetric) GetArchitecture() int32 {
	if x != nil {
		return x.Architecture
	}
	return 0
}

func (x *GPUMetric) GetMaxClock() int64 {
	if x != nil {
		return x.MaxClock
	}
	return 0
}

func (x *GPUMetric) GetCudacore() int64 {
	if x != nil {
		return x.Cudacore
	}
	return 0
}

func (x *GPUMetric) GetBandwidth() float32 {
	if x != nil {
		return x.Bandwidth
	}
	return 0
}

func (x *GPUMetric) GetFlops() int64 {
	if x != nil {
		return x.Flops
	}
	return 0
}

func (x *GPUMetric) GetMaxOperativeTemp() int64 {
	if x != nil {
		return x.MaxOperativeTemp
	}
	return 0
}

func (x *GPUMetric) GetSlowdownTemp() int64 {
	if x != nil {
		return x.SlowdownTemp
	}
	return 0
}

func (x *GPUMetric) GetShutdownTemp() int64 {
	if x != nil {
		return x.ShutdownTemp
	}
	return 0
}

func (x *GPUMetric) GetMemoryTotal() int64 {
	if x != nil {
		return x.MemoryTotal
	}
	return 0
}

func (x *GPUMetric) GetMemoryUsed() int64 {
	if x != nil {
		return x.MemoryUsed
	}
	return 0
}

func (x *GPUMetric) GetPowerUsed() int64 {
	if x != nil {
		return x.PowerUsed
	}
	return 0
}

func (x *GPUMetric) GetPciRx() int64 {
	if x != nil {
		return x.PciRx
	}
	return 0
}

func (x *GPUMetric) GetPciTx() int64 {
	if x != nil {
		return x.PciTx
	}
	return 0
}

func (x *GPUMetric) GetMemoryGauge() int64 {
	if x != nil {
		return x.MemoryGauge
	}
	return 0
}

func (x *GPUMetric) GetMemoryCounter() int64 {
	if x != nil {
		return x.MemoryCounter
	}
	return 0
}

func (x *GPUMetric) GetTemperature() int64 {
	if x != nil {
		return x.Temperature
	}
	return 0
}

func (x *GPUMetric) GetUtilization() int64 {
	if x != nil {
		return x.Utilization
	}
	return 0
}

func (x *GPUMetric) GetFanSpeed() int64 {
	if x != nil {
		return x.FanSpeed
	}
	return 0
}

func (x *GPUMetric) GetPodMetrics() map[string]*PodMetric {
	if x != nil {
		return x.PodMetrics
	}
	return nil
}

type PodMetric struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MilliCpuUsed int64 `protobuf:"varint,1,opt,name=milli_cpu_used,json=milliCpuUsed,proto3" json:"milli_cpu_used,omitempty"`
	MemoryUsed   int64 `protobuf:"varint,2,opt,name=memory_used,json=memoryUsed,proto3" json:"memory_used,omitempty"`
	StorageUsed  int64 `protobuf:"varint,3,opt,name=storage_used,json=storageUsed,proto3" json:"storage_used,omitempty"`
	NetworkRx    int64 `protobuf:"varint,4,opt,name=network_rx,json=networkRx,proto3" json:"network_rx,omitempty"`
	NetworkTx    int64 `protobuf:"varint,5,opt,name=network_tx,json=networkTx,proto3" json:"network_tx,omitempty"`
}

func (x *PodMetric) Reset() {
	*x = PodMetric{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_api_metric_metric_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PodMetric) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PodMetric) ProtoMessage() {}

func (x *PodMetric) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_api_metric_metric_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PodMetric.ProtoReflect.Descriptor instead.
func (*PodMetric) Descriptor() ([]byte, []int) {
	return file_pkg_api_metric_metric_proto_rawDescGZIP(), []int{4}
}

func (x *PodMetric) GetMilliCpuUsed() int64 {
	if x != nil {
		return x.MilliCpuUsed
	}
	return 0
}

func (x *PodMetric) GetMemoryUsed() int64 {
	if x != nil {
		return x.MemoryUsed
	}
	return 0
}

func (x *PodMetric) GetStorageUsed() int64 {
	if x != nil {
		return x.StorageUsed
	}
	return 0
}

func (x *PodMetric) GetNetworkRx() int64 {
	if x != nil {
		return x.NetworkRx
	}
	return 0
}

func (x *PodMetric) GetNetworkTx() int64 {
	if x != nil {
		return x.NetworkTx
	}
	return 0
}

var File_pkg_api_metric_metric_proto protoreflect.FileDescriptor

var file_pkg_api_metric_metric_proto_rawDesc = []byte{
	0x0a, 0x1b, 0x70, 0x6b, 0x67, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63,
	0x2f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x06, 0x6d,
	0x65, 0x74, 0x72, 0x69, 0x63, 0x22, 0x09, 0x0a, 0x07, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x22, 0xf7, 0x01, 0x0a, 0x0b, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63,
	0x12, 0x1b, 0x0a, 0x09, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x6e, 0x6f, 0x64, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x33, 0x0a,
	0x0b, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x2e, 0x4e, 0x6f, 0x64, 0x65,
	0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x52, 0x0a, 0x6e, 0x6f, 0x64, 0x65, 0x4d, 0x65, 0x74, 0x72,
	0x69, 0x63, 0x12, 0x44, 0x0a, 0x0b, 0x67, 0x70, 0x75, 0x5f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63,
	0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63,
	0x2e, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x2e, 0x47, 0x70, 0x75,
	0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0a, 0x67, 0x70,
	0x75, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x1a, 0x50, 0x0a, 0x0f, 0x47, 0x70, 0x75, 0x4d,
	0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x27, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x6d,
	0x65, 0x74, 0x72, 0x69, 0x63, 0x2e, 0x47, 0x50, 0x55, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xa4, 0x02, 0x0a, 0x0a, 0x4e,
	0x6f, 0x64, 0x65, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x12, 0x26, 0x0a, 0x0f, 0x6d, 0x69, 0x6c,
	0x6c, 0x69, 0x5f, 0x63, 0x70, 0x75, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0d, 0x6d, 0x69, 0x6c, 0x6c, 0x69, 0x43, 0x70, 0x75, 0x54, 0x6f, 0x74, 0x61,
	0x6c, 0x12, 0x24, 0x0a, 0x0e, 0x6d, 0x69, 0x6c, 0x6c, 0x69, 0x5f, 0x63, 0x70, 0x75, 0x5f, 0x66,
	0x72, 0x65, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x6d, 0x69, 0x6c, 0x6c, 0x69,
	0x43, 0x70, 0x75, 0x46, 0x72, 0x65, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x6d, 0x65, 0x6d, 0x6f, 0x72,
	0x79, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x6d,
	0x65, 0x6d, 0x6f, 0x72, 0x79, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x65,
	0x6d, 0x6f, 0x72, 0x79, 0x5f, 0x66, 0x72, 0x65, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0a, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x46, 0x72, 0x65, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x73,
	0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0c, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x74, 0x61, 0x6c,
	0x12, 0x21, 0x0a, 0x0c, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x66, 0x72, 0x65, 0x65,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x46,
	0x72, 0x65, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x72,
	0x78, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x52, 0x78, 0x12, 0x1d, 0x0a, 0x0a, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x74, 0x78,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x54,
	0x78, 0x22, 0x97, 0x06, 0x0a, 0x09, 0x47, 0x50, 0x55, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x12,
	0x14, 0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05,
	0x69, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x19, 0x0a, 0x08, 0x67, 0x70, 0x75, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x67, 0x70, 0x75, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x22, 0x0a, 0x0c, 0x61, 0x72, 0x63, 0x68, 0x69, 0x74, 0x65, 0x63, 0x74, 0x75, 0x72, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x61, 0x72, 0x63, 0x68, 0x69, 0x74, 0x65, 0x63,
	0x74, 0x75, 0x72, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x61, 0x78, 0x5f, 0x63, 0x6c, 0x6f, 0x63,
	0x6b, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x6d, 0x61, 0x78, 0x43, 0x6c, 0x6f, 0x63,
	0x6b, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x75, 0x64, 0x61, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x08, 0x63, 0x75, 0x64, 0x61, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x1c, 0x0a,
	0x09, 0x62, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x64, 0x74, 0x68, 0x18, 0x06, 0x20, 0x01, 0x28, 0x02,
	0x52, 0x09, 0x62, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x64, 0x74, 0x68, 0x12, 0x14, 0x0a, 0x05, 0x66,
	0x6c, 0x6f, 0x70, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x66, 0x6c, 0x6f, 0x70,
	0x73, 0x12, 0x2c, 0x0a, 0x12, 0x6d, 0x61, 0x78, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69,
	0x76, 0x65, 0x5f, 0x74, 0x65, 0x6d, 0x70, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x6d,
	0x61, 0x78, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x76, 0x65, 0x54, 0x65, 0x6d, 0x70, 0x12,
	0x23, 0x0a, 0x0d, 0x73, 0x6c, 0x6f, 0x77, 0x64, 0x6f, 0x77, 0x6e, 0x5f, 0x74, 0x65, 0x6d, 0x70,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x73, 0x6c, 0x6f, 0x77, 0x64, 0x6f, 0x77, 0x6e,
	0x54, 0x65, 0x6d, 0x70, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x68, 0x75, 0x74, 0x64, 0x6f, 0x77, 0x6e,
	0x5f, 0x74, 0x65, 0x6d, 0x70, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x73, 0x68, 0x75,
	0x74, 0x64, 0x6f, 0x77, 0x6e, 0x54, 0x65, 0x6d, 0x70, 0x12, 0x21, 0x0a, 0x0c, 0x6d, 0x65, 0x6d,
	0x6f, 0x72, 0x79, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0b, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x1f, 0x0a, 0x0b,
	0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x5f, 0x75, 0x73, 0x65, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0a, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x55, 0x73, 0x65, 0x64, 0x12, 0x1d, 0x0a,
	0x0a, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x5f, 0x75, 0x73, 0x65, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x09, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x55, 0x73, 0x65, 0x64, 0x12, 0x15, 0x0a, 0x06,
	0x70, 0x63, 0x69, 0x5f, 0x72, 0x78, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x70, 0x63,
	0x69, 0x52, 0x78, 0x12, 0x15, 0x0a, 0x06, 0x70, 0x63, 0x69, 0x5f, 0x74, 0x78, 0x18, 0x0f, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x05, 0x70, 0x63, 0x69, 0x54, 0x78, 0x12, 0x21, 0x0a, 0x0c, 0x6d, 0x65,
	0x6d, 0x6f, 0x72, 0x79, 0x5f, 0x67, 0x61, 0x75, 0x67, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0b, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x47, 0x61, 0x75, 0x67, 0x65, 0x12, 0x25, 0x0a,
	0x0e, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x18,
	0x11, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x65, 0x72, 0x12, 0x20, 0x0a, 0x0b, 0x74, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x75, 0x72, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x74, 0x65, 0x6d, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x75, 0x74, 0x69, 0x6c, 0x69, 0x7a,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x13, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x75, 0x74, 0x69,
	0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x61, 0x6e, 0x5f,
	0x73, 0x70, 0x65, 0x65, 0x64, 0x18, 0x14, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x66, 0x61, 0x6e,
	0x53, 0x70, 0x65, 0x65, 0x64, 0x12, 0x42, 0x0a, 0x0b, 0x70, 0x6f, 0x64, 0x5f, 0x6d, 0x65, 0x74,
	0x72, 0x69, 0x63, 0x73, 0x18, 0x15, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x6d, 0x65, 0x74,
	0x72, 0x69, 0x63, 0x2e, 0x47, 0x50, 0x55, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x2e, 0x50, 0x6f,
	0x64, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0a, 0x70,
	0x6f, 0x64, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x1a, 0x50, 0x0a, 0x0f, 0x50, 0x6f, 0x64,
	0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x27,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e,
	0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x2e, 0x50, 0x6f, 0x64, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xb3, 0x01, 0x0a, 0x09,
	0x50, 0x6f, 0x64, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x12, 0x24, 0x0a, 0x0e, 0x6d, 0x69, 0x6c,
	0x6c, 0x69, 0x5f, 0x63, 0x70, 0x75, 0x5f, 0x75, 0x73, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0c, 0x6d, 0x69, 0x6c, 0x6c, 0x69, 0x43, 0x70, 0x75, 0x55, 0x73, 0x65, 0x64, 0x12,
	0x1f, 0x0a, 0x0b, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x5f, 0x75, 0x73, 0x65, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x55, 0x73, 0x65, 0x64,
	0x12, 0x21, 0x0a, 0x0c, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x75, 0x73, 0x65, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x55,
	0x73, 0x65, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x72,
	0x78, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x52, 0x78, 0x12, 0x1d, 0x0a, 0x0a, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x74, 0x78,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x54,
	0x78, 0x32, 0x49, 0x0a, 0x0f, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x43, 0x6f, 0x6c, 0x6c, 0x65,
	0x63, 0x74, 0x6f, 0x72, 0x12, 0x36, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x4d, 0x75, 0x6c, 0x74, 0x69,
	0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x12, 0x0f, 0x2e, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x2e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x13, 0x2e, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63,
	0x2e, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x42, 0x25, 0x5a, 0x23,
	0x67, 0x70, 0x75, 0x2d, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x2d, 0x63, 0x6f, 0x6c, 0x6c, 0x65,
	0x63, 0x74, 0x6f, 0x72, 0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x6d, 0x65, 0x74,
	0x72, 0x69, 0x63, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_pkg_api_metric_metric_proto_rawDescOnce sync.Once
	file_pkg_api_metric_metric_proto_rawDescData = file_pkg_api_metric_metric_proto_rawDesc
)

func file_pkg_api_metric_metric_proto_rawDescGZIP() []byte {
	file_pkg_api_metric_metric_proto_rawDescOnce.Do(func() {
		file_pkg_api_metric_metric_proto_rawDescData = protoimpl.X.CompressGZIP(file_pkg_api_metric_metric_proto_rawDescData)
	})
	return file_pkg_api_metric_metric_proto_rawDescData
}

var file_pkg_api_metric_metric_proto_msgTypes = make([]protoimpl.MessageInfo, 7)
var file_pkg_api_metric_metric_proto_goTypes = []interface{}{
	(*Request)(nil),     // 0: metric.Request
	(*MultiMetric)(nil), // 1: metric.MultiMetric
	(*NodeMetric)(nil),  // 2: metric.NodeMetric
	(*GPUMetric)(nil),   // 3: metric.GPUMetric
	(*PodMetric)(nil),   // 4: metric.PodMetric
	nil,                 // 5: metric.MultiMetric.GpuMetricsEntry
	nil,                 // 6: metric.GPUMetric.PodMetricsEntry
}
var file_pkg_api_metric_metric_proto_depIdxs = []int32{
	2, // 0: metric.MultiMetric.node_metric:type_name -> metric.NodeMetric
	5, // 1: metric.MultiMetric.gpu_metrics:type_name -> metric.MultiMetric.GpuMetricsEntry
	6, // 2: metric.GPUMetric.pod_metrics:type_name -> metric.GPUMetric.PodMetricsEntry
	3, // 3: metric.MultiMetric.GpuMetricsEntry.value:type_name -> metric.GPUMetric
	4, // 4: metric.GPUMetric.PodMetricsEntry.value:type_name -> metric.PodMetric
	0, // 5: metric.MetricCollector.GetMultiMetric:input_type -> metric.Request
	1, // 6: metric.MetricCollector.GetMultiMetric:output_type -> metric.MultiMetric
	6, // [6:7] is the sub-list for method output_type
	5, // [5:6] is the sub-list for method input_type
	5, // [5:5] is the sub-list for extension type_name
	5, // [5:5] is the sub-list for extension extendee
	0, // [0:5] is the sub-list for field type_name
}

func init() { file_pkg_api_metric_metric_proto_init() }
func file_pkg_api_metric_metric_proto_init() {
	if File_pkg_api_metric_metric_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_pkg_api_metric_metric_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_api_metric_metric_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MultiMetric); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_api_metric_metric_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NodeMetric); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_api_metric_metric_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GPUMetric); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_api_metric_metric_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PodMetric); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_pkg_api_metric_metric_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   7,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_pkg_api_metric_metric_proto_goTypes,
		DependencyIndexes: file_pkg_api_metric_metric_proto_depIdxs,
		MessageInfos:      file_pkg_api_metric_metric_proto_msgTypes,
	}.Build()
	File_pkg_api_metric_metric_proto = out.File
	file_pkg_api_metric_metric_proto_rawDesc = nil
	file_pkg_api_metric_metric_proto_goTypes = nil
	file_pkg_api_metric_metric_proto_depIdxs = nil
}
