syntax = "proto3";

package metric;

option go_package = "gpu-metric-collector/pkg/api/metric";

service MetricCollector {
  rpc GetMultiMetric(Request) returns (MultiMetric); 
}

message Request {}

message MultiMetric {
  string node_name = 1;
  int64 gpu_count = 2;
  repeated NVLink nvlink_info = 3;
  NodeMetric node_metric = 4;
  map<string, GPUMetric> gpu_metrics = 5;
  map<string, PodMetric> pod_metrics = 6;
}

message NodeMetric {
  int64 milli_cpu_total = 1;
  int64 milli_cpu_usage = 2;
  int64 memory_total = 3;
  int64 memory_usage = 4;
  int64 storage_total = 5;
  int64 storage_usage = 6;
  int64 network_rx = 7;
  int64 network_tx = 8;
}

message GPUMetric {
    int32 index = 1;
    string gpu_name = 2;
    string architecture = 3;
    int64 max_clock = 4;
    int64 cudacore = 5;
    float bandwidth = 6;
    int64 flops = 7;
    int64 max_operative_temp = 8;
    int64 slowdown_temp = 9;
    int64 shutdown_temp = 10;
    int64 memory_total = 11;
    int64 memory_used = 12;
    int64 power_used = 13;
    int64 pci_rx = 14;
    int64 pci_tx = 15;
    int64 temperature = 16;
    int64 utilization = 17;
    int64 fan_speed = 18;
    int64 pod_count = 19;
    int64 energy_consumption = 20;
}

message PodMetric {
  int64 cpu_usage = 1;
  int64 memory_usage = 2;
  int64 storage_usage = 3;
  int64 network_rx = 4;
  int64 network_tx = 5;
  bool is_gpu_pod = 6;
  map<string, PodGPUMetric> pod_gpu_metrics = 7;
}

message PodGPUMetric {
  string gpu_uuid = 1;
  string gpu_process_id = 2;
  int64 gpu_memory_used = 3;
}

message NVLink {
  string gpu1uuid = 1;
  string gpu2uuid = 2;
  int32 lanecount = 3;
}